原则与工具
==========

哪里需要写测试？- Right-B.I.C.E.P
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

乍看一个方法或类，就要找出所有可能出现问题的地方，即所有隐藏的 Bug 是很困难。Right-BICEP 在 Bug 发掘方面为我们提供了一些哪些方面需要测试的指导

- **Right:** 确认代码所做的和你期望的是一致的
- **Boundary:** 当事情从正确变到不正确的那一刻，就是边界条件的所在了
- **Inverse:** 对于一些方法，我们可以用反向的逻辑关系来验证他们(平方/开方， insert/query）
- **Cross-checking:** 用较慢的算法测试较快的，用另一种办法测试实现的
- **Error:** 在真实世界中，错误总是会发生：磁盘会满，网络会断，程序会崩溃。你应当能通过强制的手段引发错误，来测试你的代码是如何处理这些真实世界中的问题的。
- **Performance:** 通过新建100个project，要求时间小于某一个值，保证性能


什么是好测试？ - F.I.R.S.T
^^^^^^^^^^^^^^^^^^^^^^^^

- **Fast:** 单元测试为团队带来的是来自系统的快速反馈，所以我们希望但愿侧记可以尽可能的多跑，如果单元测试花费时间过长，那么造成的问题势必会让整体运行时间过长
- **Isolated:** 测试方法之间不要有依赖（先执行某个测试方法，再执行另一个测试方法才能通过）举一个有依赖的测试例子 — flyway，
- **Repeatable:** 比如说依赖时间的，可以在本地或 CI 不同环境（机器上）上反复执行，不会出现不稳定的情况
- **Self-Validating:** 测试只写了条件没写断言？测试成功或失败不应该通过日志来定位问题
- **Timely:** 写测试是一种习惯，也是一种自己的代码能够正常工作的保障，测试至少应该和实现代码一起编写，甚至提前编写


常用工具 
^^^^^^^

- Junit4/Junit5
- Mokito/Jmock/Powermock/Jmockit
- Hamcrest/AssertJ
- Awaitibility
- RestAssured
- JsonPath


.. index:: Testing
