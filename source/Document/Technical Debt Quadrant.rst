Technical Debt Quadrant
=============================

.. note::
  **This is article from Martin Fowler** `TechnicalDebtQuadrant <https://martinfowler.com/bliki/TechnicalDebtQuadrant.html>`_


在过去的几个月里，有几篇关于技术债务的文章提出了一个问题: 什么样的设计缺陷应该或者不应该被归为技术债务。

这方面的一个很好的例子是Uncle Bob的一篇帖子，他说混乱不是债务。他的论点是，由不了解良好设计实践的人编写的混乱代码不应该成为债务。技术债应该预留给这样的情况: 当人们经过深思熟虑决定采用一种设计策略时，这种策略在较长时间内是不可持续的，但会产生短期效益，比如发布版本。问题在于，欠下这些债务很快就会产生价值，但需要尽快还清。


在我看来，设计缺陷是否是债务这个问题本身是错误的。技术债务是一个隐喻，所以真正的问题是债务隐喻是否有助于思考如何处理设计问题，以及如何传达这种想法。债务隐喻的一个特别好处是，它对于与非技术人员沟通非常方便。

我认为债务隐喻在这两种情况下都很有效 —— 区别在于债务的性质。混乱是一种不计后果的债务，它会导致严重的利息支付或长期的本金偿还。在一些项目中，我们接手了一个高负债的代码库，并发现这个比喻在与客户管理人员讨论如何处理它时非常有用。

债务的隐喻提醒我们，我们可以对设计缺陷做出选择。如果需要支付的利息足够小(比如在代码库中很少涉及的部分)，那么为了达成一个发行版而支付的债务可能不是必须偿还。

因此，有用的区别不是债务与非债务之间的区别，而是审慎债务与鲁莽债务之间的区别。


在我刚才概述的例子中还有一个有趣的区别。审慎债务和鲁莽的债务不仅有区别，还有故意为之债务和意外债务的区别。谨慎的债务的例子是故意的,因为团队知道他们需要承担债务,一些人已经思考了早些时候发布的收益是否大于付出的成本。而一个无知的设计实践的团队,其不计后果的债务甚至没有意识到多少债务进入。


故意为之、不计后果的债务可能并非无心之失。一个团队可能知道一些好的设计实践，甚至能够实践它们，但是他们决定“快速而粗略”地进行，因为他们认为他们没有足够的时间来编写干净的代码。我同意Bob叔叔的观点，这通常是一种不计后果的债务，因为人们低估了 `DesignPayoffLine <https://martinfowler.com/bliki/DesignPayoffLine.html>`_ 的位置。好的设计和干净的代码的全部意义在于使您走得更快——如果不是这样的话，像Bob叔叔、Kent Beck和Ward Cunningham这样的人就不会花时间讨论它了。


将债务划分为鲁莽/谨慎和故意/意外意味着一个象限，我只讨论了其中三个。那么，是否存在一种谨慎的、又无意的债务呢?虽然这样的事情听起来很奇怪，但我相信确实如此 —— 对于优秀的设计师团队来说，这不仅很常见，而且是不可避免的。


最近，我和一位同事聊起他刚完成的一个项目。交付有价值软件的项目，客户很满意，代码也很干净。但他对代码并不满意。他觉得团队做得很好，但是现在他们意识到设计应该是什么样的。

我总是从最好的开发人员那里听到这句话。重点是，当你在编程的时候，你也在学习。通常情况下，在您理解最佳设计方法应该是什么之前，可能需要花一年的时间对一个项目进行编程。也许一个人应该像Fred Brooks建议的那样，计划花一年的时间来构建一个系统，然后将其丢弃并重新构建，但这是一个棘手的计划。相反，你会发现，当你意识到设计应该是什么样子的时候，你也意识到你有一个无意的债务。这就是沃德在视频中提到的债务。

支付利息和偿还本金的决定仍然适用，所以这个比喻在这个例子中仍然有用。然而，用债务来比喻这一点的一个问题是，我无法想象与谨慎而疏忽的金融债务相提并论。因此，我认为很难向基金经理解释为何会出现这种债务。我的观点是，这种债务是不可避免的，因此应该预料到。随着项目的进行，即使是最好的团队也会有债务要处理——更有理由不鲁莽地用糟糕的代码使其超负荷。

.. image:: ../../images/techDebtQuadrant.png
  :width: 500px


.. index: technical debt, martin fowler
