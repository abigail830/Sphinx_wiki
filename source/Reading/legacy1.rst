遗留系统与技术变迁
===========================

自从成为一名金融业IT，好像每一天都在和遗留系统打交道，唯一的区别只在于此刻正在demise的是自己的系统还是别人的系统。

挣扎中我开始思考，究竟遗留系统从哪里来的呢？怎么样可以避免产生遗留系统呢？是因为错误的技术选型？或因为人的能力？又或是。。这个世界上其实根本就只存在遗留系统？！

这里就结合之前遇到的案例，记录一些思考，给自己挖一个坑～

---

我接手的第一个遗留系统，构建在IBM的OS/2操作系统之上。可能很多人都没听过这个OS的存在，那是一个和Windows95同年代的产品 ，然而几年后，当Windows已经嗖嗖地升级到Win98/Win2000/WinXP的时候，OS/2还是稳如泰山屹然不动。就在我接手那年，IBM宣布停止support OS/2。于是，漫长的demise之旅开始。。。

当时我就在想，是不是在一开始选型的时候就注定了这个遗留的结局？如果当初选的是Window系列，这个系统是不是就不用死了？哪个傻B决定用的OS/2啊。。明显不好用啊？

自从我有了这个想法之后，似乎陷入了一个魔咒，一个关于选型导致遗留系统产生的魔咒。遗留系统纷沓而至，390要demise，AS/400要demise，AIX要换到Linux， Websphere不好使了，DB2也出问题了，Portal要停止维护了。。IBM，怎么老是你？！后来接触了更多的公司，发现这并不是一个孤立的现象，国内的银行保险公司，几乎都在IBM魔咒的笼罩之下，即使已经来到了2020。。。

难道都是IBM惹的祸？
----------------------

如果有看过《浪潮之巅》，大概就能感受到那个年代IBM的辉煌，从大中型机的霸主，加上搭建其上的一整套解决方案软硬通吃，加上蓝色巨人的百年品牌，ToB的市场上可谓所向披靡。

撇除上帝视角，如果倒流到90年代，似乎IBM的确是当时的不二之选。往正面想想，它的确能提供银行所需的服务甚至是生态圈，往负面想想，这样的大品牌如果选了然后出问题了，也有人背锅对吧，“都已经选了世界顶级品牌了， 难道还能怪我咯？”

OS/2的生死，背后不过就是这段时间IBM和微软在ToC市场上竞争的缩影。这个选型，就如同在股票市场5000点的时候选择高位买入，本想着顺风顺水推高一把，结果无奈地看着他的竞争中败下阵来一直跌到2000点，最后不得不砍仓止损。

当跟买的企业多的时候，IBM生意自然就好了，还形成了生态圈和霸主地位，然而最终IBM能火红多久总归看得还是他自己，就像最近美股的三次熔断，危机之下又有多少公司可以全身而退？大家都不过是沧海中的一只小蚂蚁。。

谁能逃出行业浪潮的大圈圈？
--------------------------

这么说起来，即使千挑万选，最终能选的似乎也逃不出当时潮流中的热点。就像现在，说起上云，无非就是AWS、GCP、Azure，移到国内就Ali云、腾讯云、华为云；说起架构选型，一来就是微服务；说起微服务，不是spring全家桶就是istio。

在这些热点中挑出一个后，他要沉要浮似乎也不是我们这些用家说了算。如此说来，这不就如同赌博？要不干脆两眼一闭，vendor产品的话就挑个牌子最响的？有其他大公司也在用的？开源的话就挑个star最多的？社区嗓门最大的？开发语言的话，不是每年都有排行榜嘛，就按最热门的来呗！再不然。。老子不选了，自力更生全部自己建！


跳不出时代洪流，又该如何独善其身？
--------------------------------------------

纵然跑不出大圈圈，矮子里面还是得挑高个的。

对大公司来说，如何更客观更智能的评估以及怎样把这事情基准化就会尤其重要。通常都会建立一套选型机制以便有个考察的基准，比如：

- **适用性？**比如派专门的人结合使用场景去做POC验证，进行多翻比较
- **性价比？**比如选vendor产品，邀请商家投标讲标，甚至现场直接PK也是有的，不但看现在的价格，也必须看之后的运维费用和SLA，还有就是万一需要定制开发的费用。
- **人力成本？**比如想自建，还要考虑选择的技术栈在市场上是不是容易招到人？万一招不到是不是能承受从头培训的成本？
- **可靠性？**比如开源的产品多方考察：背后开发团队可靠？社区反响？资料齐全？还有谁在用？
- **安全性？**比如购买各种扫描工具，力求vendor产品或者开源库能够尽可能的符合安全和规范
- **易用性？**学习成本有多高？上手要多久？

于是，通常就搞个专门的团队，建立专门的流程和充分利用购入的工具去审核vendor产品、开源库，只有通过的，才能进入goldstack列表，而其他团队只能从列表里面选择。一项新技术从诞生到进入视野再到进入这个允许列表，通常都需要很长的时间，也正因如此，大公司很少见到新技术的快速上岗，而更多的是选用那些已经非常稳定甚至稍稍落后的。

这些应对也是很合理的，只作稍稍补充：

- 更细粒度的业务价值导向选型
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

“可用性/低延时/高并发这些都是相互制衡，而选型的时候要从业务需求出发，挑出最重要的导向指标“。这些都是老生常谈了，而这里想补充的是要更多更细地拆解考虑的粒度。

比如说，业务提到了外汇交易必须得快。那这里的快，是说只要跟外汇交易交易相关的所有步骤都必须快？还是说只是其中的某些步骤需要快？而这里的快又是指多少ms/或是ns？

于是，就需要我们针对这个交易的流程作一个更细的拆解，比如说：

- 要交易首先就是要拿到当前市场最新价格，这个需要多快呢？业务说必须ns级别才有市场竞争力。ok于是这里我们就会选择用UDP传输而不是需要握手的TCP，宁愿可能有丢包也要快。还不够？ok于是把机房搬到交易所隔壁，让网路也是最短的距离。
- 再来，交易确认时候要更新头寸。这步需要多快呢？如果说业务说，这里一慢呢就有可能收到恶意的头寸攻击，所以要在大概100ms内的级别。ok那这里看起来常规的https/json没有问题，但是要知道如果网络要跨地域调用的话，比如香港交易要去伦敦或者美国的市场交易，那海底电缆一个来回就超过100ms了。于是我们得考虑在三个主要的交易市场都得部署实例，从而让交易可以在最近的地方进行。
- 再比如说，外汇交易后，还得更新GL做结算，得汇报给regulatory等法规部门。这些需要快吗？很明显就不需要了。所以我们大可以把信息传到队列甚至写到某个中间文件让后台慢慢处理。

现在无论微服务还是serverless，都完全能提供这样的灵活性支撑。所以在一开始选型的时候，我们就可以基于业务做一些细粒度的分析。

- 鸡蛋不放一个篮子
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

即使经过了千挑万选找出了蓝筹股，但是常言道“股市有风险，投资须谨慎”，不要吊死在一棵树上总是好的。这就要求我们多想想是不是可以有一些“更平台无关”的选项。

比如写个SQL，不同的数据库往往都有自己的语法糖。该选择放弃语法糖的便利而使用更通用的SQL从而让它不强依赖于数据库？还是更多的使用语法糖从而加速开发进度？不同的项目和项目所处不同的阶段自然有不同的解答。

比如微服务，这几年大部分公司基本上手就是spring全家桶，这个写多了还真的慢慢就习惯了，好像没有spring就不会写服务的感觉。但细想想，这框架里面注入的特有的东西还是挺多的，要有一天要spring不维护了真要迁移的话，这改造的成本还不少呢。

- 找对的人/工具做选择和评估
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

大公司都偏向于用流程克服问题。但“每个流程步骤中，是否使用了合适的人”这些细节却未必那么面面俱到。

比如说，我们要派人去做POC比较几个方案的优劣。那这个派去的人是否真的清楚业务要的是什么？他又是否真的有能力去上手比较？是看看网上案例、论坛、测评就下定论呢？还是真能写一段仿真代码去具体验证呢？他对于未来发展趋势的把握和嗅觉又是如何呢？

这太“南”了，而人恰恰又是不太“可信”的，除了持续提升人的能力，可多考虑两点：

- 引入外脑辅助？比如技术栈分析上，TW的技术雷达就做的相当不错，面够广而更新也及时，更重要的是里面的选择都是基于全球各地在项目中实际使用情况的沉淀
- 引入更客观智能的工具辅助。最近捣鼓的架构守护也正是向着这个方向做架构评估的。

------

上面写得有点消极，好像就只能顺着潮流、自求多福。或者这么说，如果把这个趋势了解好，至少我们可以做到让这个系统不要一出生就成为遗留系统。但这当然是不够的，这些什么产品、开源、技术，最终都只是工具，一些为了让我们自己的系统、产品活得更好的基础设施。我们肯定是希望自己的东西活得更长久些。

水能覆舟也能载舟，不单顺势，还得借势
-----------------------------------------

小程序刚出来那年，吹得相当响亮，但是在开发社区被骂得相当惨，源于各种实在不堪的设计。那时候要做个什么创新产品，总要讨论一轮，究竟先做得网页版？App版？还是小程序？

到现在，虽然还一直在骂小程序设计的各种白痴，但对于小规模的新项目，大家都越来越多地选择小程序或者是能够自适应的网页版了。

这其中一个区别，无疑源于微信生态的建立。从小程序和公众号的整套运营方式，到淘宝不需100元就可以买到大量小程序的代码，对于还没有什么私域流量也没多少钱可以烧的小产品，如何借微信的“势”就成了生存之本。

近身肉搏用短刀，马上厮杀就得换长矛，选对了武器，才能在战场上遇神杀神！

风变之前，及时转向
---------------------------
