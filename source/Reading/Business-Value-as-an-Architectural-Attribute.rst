Business Value as an Architectural Attribute
=============================================================

业务价值即架构属性
----------------------

  Reference: https://martinfowler.com/articles/value-architectural-attribute.html
  
我们和我们的同事经常被要求为客户执行架构评估。我们与架构师会讨论他们系统的性能、弹性，以及如何更轻松地支持新功能。然而，很少涉及到不同的系统如何给业务贡献价值，以及这些价值如何与其他架构属性协同。

如果不理解业务价值，许多架构决策就会变得更加困难。举个例子，我们曾被问到如何决定是否向交易系统添加容错。通过热故障转移（hot failover)到另一个服务器的成本在数万美元左右。这种代价合理吗?我们的判断方法是询问通过该系统做交易产生了多少价值，以及这些交易给客户带来了多少收入。一旦他们调查发现系统每天要处理数百万美元的交易，那添加容错功能就变得很顺理成章了。

这个故事的重要之处在于，开始的时候客户团队并没有将业务价值作为决策的一个考虑点(尽管其中肯定有教训)。架构团队不清楚他们的系统产生的业务价值是什么，也不知道不同的组件是如何对更广泛的业务性能做出贡献。这是思维上的一个普遍缺陷，当做这些评估时，我们通常会要求与财务部门的相关人员交谈。但大家通常会反问:“你为什么要和财务聊?”

另一个例子，一家保险公司要求我们帮忙将单体系统作微服务拆分。他们已经认识到，应该通过不同的产品线(家庭、个人、汽车等)来划分服务。但他们不清楚这些产品线分别给公司利润带来多少贡献，然而这是决定拆分优先级的一个重要因素。从业务价值的角度来说，第一个拆分的项目可能不是最重要的，因为第一次分离将面临很多首次尝试带来的风险。但是一旦一个团队实践了拆分，那么就应该着手分离最有价值的产品线，使其更容易修改和扩展。


用价值流映射检验架构
---------------------

评估体系结构中的业务价值的第一步是对IT环境中的各种系统和组件进行价值流映射。业务通常会对业务流程进行某种价值流映射，检查客户旅程的每个部分是如何影响收入和利润的，但通常一旦他们到达目的地，映射就会停止，也不会尝试通过各种系统来映射价值流。

架构师应该以此为基础，将类似的业务度量分配给支持业务流程的系统，并将映射扩展到这些系统中。除了财务措施外，重要的非财务措施也可以考虑：您的客户在线检查其索赔状态的能力在多大程度上影响客户留存?(这类指标通常更难制定，但思考如何衡量它们往往可以得出重要的见解。)

对于最近的一个客户，我们进行了这样一个练习，从描述客户如何与客户公司交互的客户旅程开始。我们将这些步骤放在团队室的墙上，然后将每个步骤与客户的IT投资组合中的系统和组件联系起来。然后，我们可以评估每个系统如何对客户旅程中的步骤做出贡献，以及失败可能带来的影响。

考虑失败对业务价值的影响
----------------------------

正如我们的第一个例子所示，在评估失败的后果时，有一个特别重要的因素。如果我们想要采取措施来提高一个系统的弹性，最好是用它失败时的风险价值来表达它。一家零售商正在努力证明他们备份数据库的恢复过程是正确的。然而圣诞节前也有大量其他的业务可见特性在排队，因此很难对数据库备份及修复这样的技术任务进行优先级排序。我们的建议是询问企业对“黑色星期五”数据库崩溃的感受:万一崩溃的话，损失成本是多少，他们希望系统多快恢复?这让业务决定去主导这个围绕数据库恢复进行的彩排并缩短恢复时间，不然这项工作将继续淹没在IT的需求队列中。

在进行风险价值评估时，有两种值得称赞的方法。一种方法是自顶向下，查看业务功能并确定哪些软件系统支持该功能。另一个是相反的，从一个软件系统开始，并考虑失败会产生什么后果。

风险价值分析的一个重要部分是认识到，由于不同的失败有不同的严重后果，所以所有的软件组件不需要相同的弹性级别。想象一下库存管理系统在Boxing day(相当于英国的黑色星期五)出现故障。如果这意味着无法查看库存，那我们要么确认无法完成的订单，要么不接受订单，两种选择都会造成重大损失。然而，在发货系统中出现故障可能导致订单在队列中等待处理，这可能会导致延迟交付。业务领导可能会认为后一种情况不太值得关注，那他们就要准备好面对这种架构的较弱弹性。

不管具体场景是什么，弹性的程度应该是一个商业决策。数据一致性也是如此。在查看分布式数据库时，架构师通常不愿放松可用性的一致性。但是，重复预订几间酒店房间的商业成本可能比根本不接受预订要少得多。在一致性和可用性之间进行权衡是一个商业决策，而不是一个技术决策。


跨功能需求（CFRs)应该由业务价值来证明
---------------------------------------

这里涉及一个主题，我们不应该只是评估特性的价值，还应该评估系统特性的价值，这经常被归类为跨功能需求(即非功能性需求，如“性能”)。如果想让系统遵循一些技术标准，那么我们需要了解如果不这样做，将会失去什么价值，并将这些价值传达给非技术人员。评估CFRs的价值通常是困难的，许多技术人员回避由此产生的争论。但如果做不到这一点，造成的危害将不仅仅是过度投资于低价值技术的风险。它也给技术人员和他们的用户之间的合作设置了一个真正的障碍。

理解价值应该有助于做出对于组件灵活性需求的决策。客户有一个处理支付的组件，该组件需要与某支付公司交互。客户希望这组件易于配置，以便在发生变化时能够快速调整。这时，通常存在两种的选择。一是在支付组件中硬编码交互所需的参数，而另一个选项使则是让所有参数都是可配置的。可配置选项允许在几天内通过更改配置文件来配合支付提供商的变动。然而，通常这种可配置性会增加组件代码的复杂性，从而增加其他更改的成本。这是与可配置性之间的一种常见的权衡——您可以以其他地方更改更困难为代价，简化可配置位的更改。这里至关重要的一点是，与支付提供商交互的过程中最困难的部分实际上是协商一份新的法律合同——这项工作通常需要一年多的时间。因此，在这里配置提供者信息是不值得的，因为修改一个不可配置的组件仍然比法律协商快得多。


业务价值意味着CFR因组件而异
---------------------------------

上述两个例子都说明，对弹性和灵活性等问题采用“一刀切”的方法可能毫无用处，而且是浪费。几年前，我们曾与一家机构合作，该机构决定实施“5个9”的可用性要求，令人惊讶的是，他们甚至将这一规定应用于员工用来预订他们最喜欢的午餐零食的三明治订购系统。我们发现，在不同层次的服务上与业务达成一致是非常有用的，例如，服务的损失是否会立即影响客户体验或收入，或者我们是否能够承受在数据库恢复时服务中断几个小时?

通过了解系统如何支持业务价值，可以强调的另一个问题是，单个组件必须支持多个不同的价值流和可靠性级别。这在支持多个不同业务流程的单体中很常见，这可能是将事情分解的一个重要动机，例如，允许我们仅在根据相应的业务价值为高可用性支付溢价

