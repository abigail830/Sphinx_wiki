为什么要从业务价值导向架构分析和决策？
===================================

  Business Value as an Architectural Attribute
  
  为什么要从业务价值角度考虑架构？
  
  Reference: https://martinfowler.com/articles/value-architectural-attribute.html


使用价值流映射来检查架构
--------------------------------

评估架构的业务价值，第一步是要对IT环境中的各种系统和组件进行价值流映射。业务人员常常会对业务流程进行价值流映射，分析用户旅程各个部分如何影响收入和利润，而一旦达到目的，映射分析就会停止，大家也不会尝试从架构角度来映射价值流。

架构师可以参考这种做法并把映射继续拓展到架构层面，将业务指标也对应地分配给支撑业务流程的系统。除了财务指标外，重要的非财务指标也可以一样的映射：例如‘客户线上查询索赔状态’的功能在多大程度上影响客户留存?(这类指标通常很难制定，但在思考过程中往往可以得出重要的洞见。)

最近在一个客户那里我们就进行了这样一个练习，从客户与公司交互的用户旅程开始。将步骤都贴在团队办公室的墙上，然后再将旅程的每个步骤与客户IT投资组合中的系统及组件联系起来。接着，我们就可以评估每个系统是怎样对客户旅程中的各个步骤做出贡献，以及系统失败可能带来的业务影响。


考虑系统出问题的时候对业务价值的影响
------------------------------------

正如上面例子提到的，评估系统失败可能带来的业务影响是一个特别重要的点。例如，当纠结是否要提高一个系统的弹性时，最好的判断方法是看系统失败时带来的业务风险。曾经遇到一家零售商，他们希望去验证备份数据库的恢复过程是正确的。然而圣诞节前也有大量其他的业务功能特性在排队，因此大家很难对数据库备份及修复这样的技术任务进行优先级排序。我们尝试询问，如果在“黑色星期五”发生数据库崩溃的话，损失成本是多少，希望系统多快恢复? 这让业务人员马上决定去主导这个围绕数据库恢复进行的彩排并缩短恢复时间，若不是这样询问，这项工作估计将继续淹没在IT的需求队列中。

在评估有风险的价值时，有两种不错的方式。一种方法是自上而下，查看业务功能并确定哪些软件系统支撑该功能。另一种方法则相反，从软件系统开始，考虑系统失败会产生什么后果。

在分析风险价值时，最重要的是要认识到不同系统失败带来的后果其严重性是不一样的，所以并不是所有的系统组件都需要相同的弹性级别。假设，在Boxing day的时候(相当于英国的黑色星期五)股票管理系统出现了故障。如果这导致无法查看库存，那我们要么选择接受订单，即使不确认是否能完成，要么就拒绝订单，但两种选择都会造成重大损失。而如果是在发货系统中出现故障，这导致订单在队列中等待处理，并最终延迟交付。如果业务认为后一种情况不太值得关注，那大家就要准备好面对这种架构较弱弹性带来的风险。不管具体场景是什么，弹性的程度应该是一个商业决策。数据一致性也是如此。在查看分布式数据库时，架构师通常不愿放松可用性的一致。但是，重复预订几间酒店房间的商业成本可能比根本不接受预订要少得多。在一致性和可用性之间进行权衡是一个商业决策，而不是一个技术决策。这也体现在CAP定理中（译者注 CAP: https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86)。


跨功能需求（CFRs) 应该由业务价值来证明
---------------------------------------

这里涉及一个宗旨，我们不应该只是评估业务功能的带来的价值，还应该评估系统特性的价值，系统特性常被归类为跨功能需求(即非功能性需求，如“性能”)。如果想让系统达到某些技术指标，那么我们就需要让非技术人员也了解到，如果不这样做将会失去什么业务价值。评估跨功能需求（CFRs)的业务价值通常是困难的，许多技术人员回避由此产生的争论。但如果做不到正确地评估，造成的危害将不仅仅是对低价值技术的过度投资。也将给技术人员和用户之间的合作设置了一个真正的障碍。

理解价值将有助于做出对于组件灵活性需求的决策。例如，某客户有一个处理支付的组件，该组件需要与某支付提供商对接。客户希望这组件易于配置，以便在支付提供商发生变化时能够快速调整。这时，通常存在两种的选择。一是在该组件中硬编码所有对接时需要的参数，而另一个则是让所有参数都是可配置的。借助可配置选项，组件可以在几天内通过更改配置文件的方式，配合支付提供商的变动。然而，通常这种可配置性会增加组件代码的复杂性，从而增加其他更改的成本。这是与可配置性之间的一种常见的权衡：当然，也可以选择就允许其他地方更改更困难，而坚持简化可配置项的更改。这里至关重要的是要考虑到，在与支付提供商交互的过程中最困难的部分其实是什么？如果难点在于协商一份新的法律合同，这通常需要一年多的时间。那上面简化配置支付提供者信息就是不值得的，因为即使修改一个不可配置的组件更花时间，但仍然比法律协商要快得多。


业务价值意味着跨功能需求（CFRs)因组件而异
----------------------------------------

上述两个例子都说明，对弹性和灵活性等问题采用“一刀切”的方法毫无用处，更是一种浪费。几年前，我们曾与一家机构合作，该机构决定实施“5个9”的可用性要求，令人惊讶的是，他们甚至将这一规定应用于一个仅供内部员工使用的订餐系统。在不同层次的服务上与业务达成一致是非常有用的，例如，服务的损失是否会立即影响客户体验或收入，或者我们是否能够承受在数据库恢复时服务中断几个小时?

通过了解系统如何支持业务价值，可以强调的另一个问题是，单个组件必须支持多个不同的价值流和可靠性级别。这在支持多个不同业务流程的单体中很常见，这可能是将事情分解的一个重要动机，例如，允许我们仅在根据相应的业务价值为高可用性支付溢价




-----------------------------------------


业务价值即架构属性
----------------------

 
  
我和同事们经常要为客户做架构评估。我们会和架构师一起讨论系统的性能、弹性，以及如何更轻松地支持新功能。然而，很少涉及到不同的系统如何给业务贡献价值，以及业务价值怎样与其他架构属性协同。

如果不理解业务价值，许多架构决策就会变得更加困难。举个例子，我们曾被问到如何决定是否向交易系统添加容错。通过热故障转移（hot failover)到另一个服务器的成本通常在数万美元。这代价合理吗?我们的判断方法是询问通过该系统做交易产生了多少价值，以及这些交易给客户带来了多少收入。一旦他们调查发现系统每天要处理数百万美元的交易，那添加容错功能就变得很顺理成章了。

这个故事的重要之处在于，开始的时候客户团队并没有将业务价值作为决策的一个考虑点(相信他们为此曾趟了不少坑)。架构团队不清楚他们的系统产生的业务价值是什么，也不知道不同的组件是如何对更广泛的业务性能做出贡献。这是思维上的一个普遍缺陷，当做这些评估时，我们常会要求与财务部门的相关人员交谈。但大家往往会反问:“你为什么要和财务聊?”

另一个例子，一家保险公司要求我们帮忙将单体系统作微服务拆分。他们已经认识到，应该通过不同的产品线(家庭、个人、汽车等)来划分服务。但不清楚这些产品线分别给公司带来多少利润，然而这是决定拆分优先级的一个重要因素。从业务价值的角度来说，第一个拆分的项目通常不会挑最重要的，因为第一次拆分将面临很多首次尝试带来的风险。但是一旦一个团队实践了拆分，那么就应该开始着手分离最有价值的产品线，使其更容易修改和扩展。















