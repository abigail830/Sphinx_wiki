You’re Not Actually Building Microservices
====================================================

.. note::
  **This is article from Justin Etheredge** `You’re Not Actually Building Microservices <https://www.simplethread.com/youre-not-actually-building-microservices/>`_

我最近读了一篇名为《`The False Dichotomy of Monoliths and Microservices <https://jimmybogard.com/the-false-dichotomy-of-monoliths-and-microservices/>`_ 》（错误的单体和微服务二分法）的文章，作者是Jimmy·Bogard，我非常喜欢这篇文章。在通读全文时，我注意到他提到了我使用过的一个妙语，即将大多数微服务实现称为“分布式单体”。我简单地想了想，也许是我创造了这个术语，但是谷歌很快让我明白了这个想法是荒谬的。我之所以说“荒谬”，是因为这个短语以前就已经使用过了，它非常完美地描述了大多数greenfield微服务实现的转变。

在我们进入细节之前，我必须坦白:我是单体架构的超级粉丝。近年来，由于微服务热潮，它受到了很多负面的报道。但我认为问题的真正根源在于，开发人员使用的应用程序在多年的时间里缓慢地积累了越来越多的功能(通常没有测试)，这些应用程序变得非常脆弱，很难更改。我不会否认，这是一个大问题!这是面向服务体系结构和现在的微服务(微服务是SOA的子集吗?)设计的核心问题之一。

我不是在建立微服务吗?
------------------------

在回答这个问题之前，让我们定义一下大多数人认为微服务的对立面是什么...单体。目前的挑战之一是为单体找到一个完整的定义，因为它们通常是在实现SOA或微服务的上下文中定义的。我认为维基百科的定义其实很好:

  如果一个软件系统由一个独立的单体结构组成，那么它就被称为“单体”，在这个体系结构中，功能上不同的方面(例如数据输入和输出、数据处理、错误处理和用户界面)都是相互交织的，而不是由架构中独立的组件/模块提供。

其基本思想是，事物不是被分解成独立的组件，而是相互交织在一起的。从上面Jimmy的文章中可以看出，在这个定义中并没有说到这些作品在物理上是否彼此分散。我们喜欢将单体看作一个大型的单一代码库，运行在单一系统上，但事实并非如此。一个单体的核心原则是系统功能是相互交织的。

如果我们遵循这个逻辑，那么一个分布式的单体是什么?它将是一组相互交织的物理分布式服务。听起来是不是很熟悉?希望对你有帮助，这不是太熟悉。
