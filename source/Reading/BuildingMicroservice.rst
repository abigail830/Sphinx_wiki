Building Microservice
===============================

【微服务设计】

* `Chapter 1. 微服务`_
* `Chapter 2. 演进式架构师`_

Chapter 1. 微服务
----------------------------
* **很小，专注于做好一件事**： 

  * Single Responsibility Principle(单一指责原则)“把因相同原因而变化的东西聚合到一起，而把因不同原因而变化的东西分离开来”，强调内聚性。
  
* **多小才算小**：

  * 两周内可以重写完？
  * 当你不清楚什么是小，但能感觉到什么是大的时候，不再感觉代码库过大就是足够小
  * 能够与团队结构相匹配 
  * 能够处理分布式管理的复杂性
  
* **自治**：

  * 独立部署 / 独立修改 / 服务间解耦
  
* **主要好处**： 

  * 技术异构性（但要寻找平衡） 
  * 弹性，服务边界就是一个舱壁，要考虑不可用、服务降级、网络
  * 扩展，小部分功能的扩容
  * 简化部署，小部分部署，快速回滚
  * 与组织结构相匹配， 在小型代码库上工作的小团队更高效
  * 可组合型性，重用已有功能
  * 对可替代性的优化，逐步替换遗留系统

* **分解技术**

  * 面向服务的架构：通信协议（SOAP）如何选择，第三方中间件如何选择，服务粒度如何确定
  * 共享库：无法享受异构技术，无法独立部署，无法确保弹性
  * 模块

* **没有银弹**


Chapter 2. 演进式架构师
-------------------------

:Inigo Montoya, 电影《公主新娘》中的人物：
  你总提及的那个词，它的含义与你想表达的意思并不一样
  

**架构师更类似于城市规划师而不是建筑师**

* 架构师比建筑师面临更多需求、工具、技术变更，必须改变那种从一开始就要设计出完美产品的想法
* 相反，应该像规划师划分居民区工业区一样，设计出一个合理的框架，引入一些规范，再慢慢演化出正确的系统
* 专注大方向，只在有限的情况下参与到非常具体的细节实现中
* 要保证系统满足当前需求，也可以应对将来变化，保证开发和用户开心

* 分区

* 一个原则性的方法

  * 战略目标
  * 原则
  * 实践
  * 将原则与实践相结合
  * 真实世界的例子

* 要求的标准

  * 监控
  * 接口
  * 架构安全性
  
* 代码治理

  * 范例
  * 裁剪服务代码模版
  
* 技术债务

**例外管理**
原则与实践可以指导构建系统，如果破例，记录下来。如果破例多次，可以通过修改原则与实践把理解固化。如果你所在的组织对开发人员有非常多的限制，那么微服务可能并不适合你

**集中治理与领导**
确保系统


**建设团队**：  帮助别人成长。伟大的软件来自于伟大的人。






.. index: Microservices

